{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","HelicopterButton","button","ShowBalanceButton","AccountBalance","props","buttonText","showBalance","content","amount","onClick","brrr","src","width","alt","handleBalanceVisibilityChange","Td","td","H1","h1","Label","label","Error","div","Button","BuyButton","SellButton","CancelButton","TradeInput","input","Coin","useState","modalIsOpen","setModalIsOpen","close","setInsufficientUsdBalanceMessage","setInsufficientCoinBalanceMessage","name","ticker","price","balance","action","event","preventDefault","handleRefresh","tickerId","isOpen","style","top","left","right","bottom","marginRight","transform","backgroundColor","ariaHideApp","onRequestClose","toUpperCase","htmlFor","insufficientUsdBalanceMessage","insufficientCoinBalanceMessage","id","type","required","onChange","setbuyInputValue","target","value","handleBuy","buyInputValue","handleSell","Table","table","Tr","tr","CoinList","coinData","map","key","setCoinBalance","coinBalance","Img","img","Header","header","ExchangeHeader","logo","className","Component","Div","formatPrice","parseFloat","Number","toFixed","App","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","symbol","quotes","USD","setCoinData","useEffect","length","accountBalance","setAccountBalance","setShowBalance","valueChangeId","tickerURL","newPrice","newCoinData","values","newValues","ammountVallue","ammountOfCoin","newAccountBalance","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3b272c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n      \r\n    font-size: 2rem;\r\n    text-align: center;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n    `;\r\n\r\nconst HelicopterButton = styled.button`\r\n    margin: 0.3rem;\r\n    padding: 3px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    \r\n    `;\r\n\r\nconst ShowBalanceButton = styled.button`\r\n    margin: 0.3rem;\r\n    padding: 5px;\r\n    font-size: 0.4em;\r\n    background-color: #fff;\r\n    border: 2px solid rgba(112, 111, 211, 0);\r\n    border-radius: 5px;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n`\r\n\r\n\r\n\r\n \r\n\r\n\r\n const AccountBalance = (props) =>  {\r\n    \r\n        const buttonText = props.showBalance ? 'Hide balance' : 'Show balance'\r\n        let content = null;\r\n        if (props.showBalance){\r\n              content =\r\n              \r\n              <>\r\n\r\n              <div>\r\n              Balance: ${props.amount}\r\n              <HelicopterButton onClick = {props.brrr}> \r\n                  <img src=\"https://repository-images.githubusercontent.com/248313335/ce39a680-697b-11ea-90da-a31bb68a0024\" width=\"50\" alt = 'Print more money' />  \r\n              </HelicopterButton>\r\n              </div>  \r\n              \r\n                        \r\n              </>\r\n        }\r\n        return (\r\n            <>\r\n            \r\n            <Section >\r\n             {content}\r\n             <ShowBalanceButton onClick = {props.handleBalanceVisibilityChange}>{buttonText}</ShowBalanceButton>\r\n             \r\n            </Section>\r\n              \r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount : PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport default AccountBalance;","\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\nimport Modal from 'react-modal';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nconst Td = styled.td`\r\nborder: 1px solid;\r\nwidth: 27vh;\r\ntext-align: center;\r\nmargin: 50px auto 50px auto;\r\nfont-size: 1.4rem;`\r\n\r\n\r\nconst H1 = styled.h1`\r\n\r\ndisplay: flex;\r\ncolor: white;\r\n\r\n`\r\n\r\nconst Label = styled.label`\r\ndisplay: flex;\r\ncolor: white;\r\n\r\n`\r\n\r\nconst Error = styled.div`\r\ndisplay: flex;\r\ncolor: red;\r\nfont-size: 0.82rem;\r\n`\r\n\r\nconst Button = styled.button`\r\nfont-size: 12 px; \r\n    width: 64px;\r\n    line-height: 12 px; \r\n    padding: 4px; \r\n    border-radius: 5px; \r\n    margin: 3px 5px 0;\r\n    border: 2px solid rgb(28, 110, 164); \r\n`\r\n\r\nconst BuyButton = styled.button`\r\nbackground-color: #4CAF50;\r\ncolor: white;\r\nborder: none;\r\ncursor:pointer;\r\nborder-radius: 4px\r\ntext-align: center;\r\nmargin: 3px;\r\n`\r\n\r\nconst SellButton = styled.button`\r\n\r\nbackground-color: #f44336;\r\ncolor: white;\r\nborder: none;\r\ntext-align: center;\r\nmargin: 3px;\r\ncursor:pointer;\r\n`\r\n\r\nconst CancelButton = styled.button`\r\nborder: none;\r\nmargin-left: 5px;\r\nborder: none;\r\ncursor:pointer;\r\n`\r\nconst TradeInput = styled.input`\r\nwidth: 34%;\r\n\r\n`\r\n\r\n\r\n\r\nconst Coin = (props) =>  {\r\n\r\nconst[modalIsOpen,setModalIsOpen] = useState(false)\r\n\r\n\r\n    const customStyles = {\r\n        content : {\r\n          top                   : '50%',\r\n          left                  : '50%',\r\n          right                 : 'auto',\r\n          bottom                : 'auto',\r\n          marginRight           : '-50%',\r\n          transform             : 'translate(-50%, -50%)',\r\n          backgroundColor       : 'rgb(38, 45, 52)'  \r\n        }\r\n    };\r\n\r\n    const close = () => {\r\n      \r\n        setModalIsOpen(false) \r\n        props.setInsufficientUsdBalanceMessage(false) \r\n        props.setInsufficientCoinBalanceMessage(false)\r\n\r\n    }\r\n     \r\n\r\n    \r\n    const handleClick = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        props.handleRefresh(props.tickerId);\r\n        \r\n    } \r\n\r\n\r\n\r\n\r\n    const handleBuyClick = (event) => {\r\n        \r\n        event.preventDefault();\r\n        \r\n        \r\n        \r\n        props.handleBuy(props.tickerId, props.buyInputValue);\r\n        \r\n    } \r\n\r\n    const handleSellClick = (event) => {\r\n        \r\n        event.preventDefault();\r\n        \r\n        \r\n        \r\n        props.handleSell(props.tickerId, props.buyInputValue);}\r\n\r\n\r\n    \r\n        return (\r\n            <>\r\n            <tr >\r\n                <Td>{props.name}</Td>\r\n                <Td>{props.ticker}</Td>\r\n                <Td>${props.price}</Td>\r\n                {props.showBalance ? <Td> {props.balance}</Td> : null}\r\n\r\n            <Td>\r\n                \r\n                <form action=\"#\" >\r\n                <Button onClick = {() => setModalIsOpen(true)}>Trade</Button>\r\n                <Button onClick = {handleClick}>Refresh</Button>\r\n                </form>\r\n            </Td>\r\n          </tr>\r\n\r\n          <Modal \r\n          \r\n           isOpen = {modalIsOpen} \r\n           style = {customStyles} \r\n           ariaHideApp={false}\r\n           onRequestClose = {close}>\r\n           <H1> Trade {props.tickerId.toUpperCase()} </H1> \r\n           \r\n           <Label htmlFor = \"buyInput\"> Amount of Coins to Buy/Sell </Label>\r\n           {props.insufficientUsdBalanceMessage && <Error>Insufficient Balance (USD)</Error>}\r\n           {props.insufficientCoinBalanceMessage && <Error>Insufficient Balance of Coins to sell</Error> }\r\n\r\n\r\n           <TradeInput id = \"buyInput\" \r\n           type =\"number\" \r\n           required\r\n           onChange={event => props.setbuyInputValue(event.target.value)}>\r\n           </TradeInput>\r\n\r\n\r\n           <BuyButton onClick = {handleBuyClick} >Buy</BuyButton>\r\n           <SellButton onClick = {handleSellClick} >Sell</SellButton>\r\n           <CancelButton onClick = {close}>Cancel</CancelButton>\r\n          </Modal>\r\n\r\n          </>\r\n        )\r\n    }\r\n\r\n \r\n\r\n    \r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired, \r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Coin;","import React from 'react'\r\nimport Coin from '../Coin/Coin'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Table = styled.table`\r\n  margin:50px auto 50px auto;\r\n  display: inline-block;\r\n  font-size: 1.4rem;\r\n}\r\n\r\n`;\r\n\r\nconst Tr = styled.tr`\r\nwidth: 1000px ;\r\n`;\r\n\r\n const CoinList = (props) =>  {\r\n  \r\n        return (\r\n            <Table>\r\n            <thead>\r\n              <Tr >\r\n                <th>Name</th>\r\n                <th>Ticker</th>\r\n                <th>Price</th>\r\n                {props.showBalance ? <th>Balance</th> : null}\r\n                <th>Actions</th>\r\n                \r\n    \r\n              </Tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                props.coinData.map(({key,name, ticker,price, balance}) => \r\n                \r\n                <Coin \r\n                key={key} \r\n                handleRefresh = {props.handleRefresh} \r\n                handleBuy = {props.handleBuy}\r\n                handleSell ={props.handleSell}\r\n                buyInputValue = {props.buyInputValue}\r\n                setbuyInputValue ={props.setbuyInputValue}\r\n                setCoinBalance = {props.setCoinBalance}\r\n                coinBalance = {props.coinBalance}\r\n                name={name} \r\n                ticker={ticker}\r\n                showBalance = {props.showBalance}\r\n                balance = {balance} \r\n                price={price}\r\n                tickerId = {key}\r\n                insufficientUsdBalanceMessage ={props.insufficientUsdBalanceMessage}\r\n                setInsufficientUsdBalanceMessage = {props.setInsufficientUsdBalanceMessage}\r\n                insufficientCoinBalanceMessage = {props.insufficientCoinBalanceMessage}\r\n                setInsufficientCoinBalanceMessage = {props.setInsufficientCoinBalanceMessage}\r\n                 />)\r\n              }\r\n    \r\n\r\n           \r\n            </tbody>\r\n    \r\n            </Table>\r\n        )\r\n    }\r\n\r\n    export default CoinList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport logo from '../../logo.svg';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Img = styled.img `\r\nheight: 8rem;\r\npointer-events: none;\r\n\r\n`;\r\n\r\n\r\nconst Header = styled.header`\r\nbackground-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: 36px;\r\n    color: white;\r\n\r\n`;\r\n\r\n\r\nconst H1 = styled.h1`\r\nfont-size: 4rem;\r\n`;\r\n\r\n \r\n\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header >\r\n            <Img src ={logo} alt=\"React logo\" className = \"App-logo\" />\r\n            <H1 className = \"App-tittle\">\r\n              Coin Exchange \r\n            </H1 >\r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","\r\n\r\nimport AccountBalance from './components/AccountBalance/AccountBalance.jsx'\r\nimport React, {useEffect, useState} from 'react';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport styled from 'styled-components'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst Div = styled.div\r\n`\r\n\r\ntext-align: center;\r\nbackground-color: rgb(4, 101, 228);\r\ncolor: #cccccc;\r\n\r\n`;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(4))\r\n\r\nconst COIN_COUNT = 10;\r\n\r\nfunction App () {\r\n  \r\n\r\n  const [coinBalance, setCoinBalance] = useState(0)\r\n\r\n  const componentDidMount = async () => {\r\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins')\r\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\r\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/'\r\n    const promises = coinIds.map(id => axios.get(tickerUrl + id ))\r\n    const coinData =  await Promise.all(promises)\r\n    const coinPriceData = coinData.map(function(response){\r\n    const coin = response.data;\r\n      return{\r\n      key: coin.id,\r\n      name: coin.name,\r\n      ticker: coin.symbol,\r\n      balance: coinBalance,\r\n      price: formatPrice(coin.quotes.USD.price),\r\n\r\n    };\r\n  });\r\n    \r\n    setCoinData(coinPriceData)\r\n    \r\n}\r\n\r\n\r\n  useEffect(() =>{\r\n     if (coinData.length === 0){\r\n\r\n     componentDidMount();\r\n      \r\n     }\r\n  })\r\n\r\n \r\n  const [accountBalance, setAccountBalance] = useState(10000)\r\n  const [showBalance, setShowBalance] = useState(true)\r\n  const [coinData, setCoinData] = useState([])\r\n  const [buyInputValue, setbuyInputValue] = useState('')\r\n  const[insufficientUsdBalanceMessage, setInsufficientUsdBalanceMessage] = useState(false)\r\n  const[insufficientCoinBalanceMessage, setInsufficientCoinBalanceMessage] = useState(false)\r\n\r\n\r\n \r\n  \r\n  const handleBalanceVisibilityChange = () =>{\r\n\r\n    setShowBalance(oldValue => !oldValue)\r\n    \r\n  }\r\n \r\n\r\n\r\n  \r\n  const handleRefresh = async (valueChangeId) => {\r\n    \r\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`\r\n    const response = await axios.get(tickerURL)\r\n    const newPrice = formatPrice(response.data.quotes.USD.price)\r\n    const newCoinData = coinData.map( function (values){\r\n    let newValues = {...values}; \r\n    if (valueChangeId === values.key){\r\n      newValues.price = newPrice;\r\n    };\r\n        \r\n        return newValues;\r\n    });\r\n\r\n\r\n    setCoinData(newCoinData)\r\n  }\r\n\r\n  //Gets the current price from coinpaprika, subtracts from account balance and adds to the spesific coin balance \r\n  const handleBuy = async (valueChangeId, ammountVallue) => {\r\n    \r\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`\r\n    const response = await axios.get(tickerURL)\r\n    const newPrice = formatPrice(response.data.quotes.USD.price)\r\n    const newCoinData = coinData.map( function (values){\r\n    let newValues = {...values}; \r\n \r\n    if (valueChangeId === values.key){\r\n      let ammountOfCoin = parseFloat(ammountVallue)\r\n      let newAccountBalance = accountBalance - (newPrice * ammountOfCoin)\r\n\r\n      if (newAccountBalance > 0 ){\r\n        setAccountBalance(newAccountBalance)\r\n        newValues.balance  += ammountOfCoin;\r\n        setInsufficientUsdBalanceMessage(false)\r\n      }\r\n      else{\r\n        setInsufficientUsdBalanceMessage(true)\r\n      }\r\n\r\n    };\r\n        \r\n        return newValues;\r\n    });\r\n\r\n    \r\n    setCoinData(newCoinData)\r\n  }\r\n  \r\n\r\n  \r\n  const handleSell = async (valueChangeId, ammountVallue) => {\r\n    \r\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`\r\n    const response = await axios.get(tickerURL)\r\n    const newPrice = formatPrice(response.data.quotes.USD.price)\r\n    const newCoinData = coinData.map( function (values){\r\n    let newValues = {...values}; \r\n \r\n    if (valueChangeId === values.key){\r\n      let ammountOfCoin = parseFloat(ammountVallue)\r\n      let newAccountBalance = accountBalance + (newPrice * ammountOfCoin)\r\n      if (ammountOfCoin <= newValues.balance ){\r\n      setAccountBalance(newAccountBalance)\r\n        newValues.balance  -= ammountOfCoin;\r\n        setInsufficientCoinBalanceMessage(false)\r\n      }\r\n      else{\r\n        setInsufficientCoinBalanceMessage(true)\r\n      }\r\n    };\r\n        \r\n        return newValues;\r\n    });\r\n\r\n    \r\n    setCoinData(newCoinData)\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  const increaseBalance = () =>{\r\n    let helecopter = accountBalance + 1200\r\n    setAccountBalance ( helecopter)\r\n}\r\n\r\n\r\n\r\n\r\n    return (\r\n    <Div >\r\n        <ExchangeHeader />\r\n        <AccountBalance \r\n        brrr = {increaseBalance}\r\n        amount={accountBalance} \r\n        showBalance = {showBalance} \r\n        handleBalanceVisibilityChange = {handleBalanceVisibilityChange} />\r\n        <CoinList \r\n        coinBalance = {coinBalance}\r\n        setCoinBalance = {setCoinBalance}\r\n        coinData = {coinData} \r\n        showBalance={showBalance}\r\n        handleRefresh ={handleRefresh}\r\n        handleBuy ={handleBuy}\r\n        handleSell = {handleSell}\r\n        buyInputValue = {buyInputValue}\r\n        setbuyInputValue ={setbuyInputValue}\r\n        insufficientUsdBalanceMessage ={insufficientUsdBalanceMessage}\r\n        setInsufficientUsdBalanceMessage = {setInsufficientUsdBalanceMessage}\r\n        insufficientCoinBalanceMessage = {insufficientCoinBalanceMessage}\r\n        setInsufficientCoinBalanceMessage = {setInsufficientCoinBalanceMessage}\r\n        /> \r\n       \r\n       <div>By Sbelka-1703</div>\r\n    </Div>\r\n  );\r\n \r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}